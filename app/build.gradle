apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.protobuf'//声明插件
android {
    compileSdkVersion 28
    lintOptions {
        abortOnError false
    }
    defaultConfig {
        applicationId "jetpack.zmkj.com.jetpack"
        minSdkVersion 18
        targetSdkVersion 28
        multiDexEnabled true
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    dataBinding {
        enabled = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        //这里主要是添加存放kotlin的测试文件夹，不然我们在test里创建kotlin文件夹是没什么效果的
        test.java.srcDirs += 'src/test/kotlin'
        main {
            proto {
                // 除了默认的'src/main/proto'目录新增proto文件的方法
                srcDir 'src/main/protos'
                include '**/*.proto'
            }
        }
    }
}

protobuf { //protobuf生成的配置
    protoc {
        artifact = 'com.google.protobuf:protoc:3.5.1'
    }
    generatedFilesBaseDir = "$projectDir/src/"
    //这里配置生成目录，编译后会在 build\generated\source\proto 的目录下生成对应的java文件
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.builtins {
                java {}
            }
        }
    }

}
def nav_version = '1.0.0'
def work_version = "1.0.1"
ext.rxandroid_version = '2.3.0'
ext.paging_version = '2.1.2'
def room_version = "2.2.5"
dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    api project(":httplib")
    api 'com.android.support.constraint:constraint-layout:1.1.3'
    api 'android.arch.lifecycle:extensions:1.1.1'
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    testCompile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    testImplementation 'org.testng:testng:6.9.6'
    api "android.arch.navigation:navigation-fragment:$nav_version"
    api "android.arch.navigation:navigation-ui:$nav_version"
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    api "android.arch.work:work-runtime:$work_version"
    api "androidx.paging:paging-runtime:$paging_version"
    api "androidx.paging:paging-rxjava2:$paging_version"
    testImplementation "androidx.paging:paging-common:$paging_version"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    // For Kotlin use kapt instead of annotationProcessor

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"

    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"

    api 'androidx.appcompat:appcompat:1.1.0'//1.1.0在5.Xvivo手机上奔溃，暂时不要升级
    api 'com.google.android.material:material:1.2.0-alpha06'

    api 'tv.danmaku.ijk.media:ijkplayer-java:0.8.8'
    api 'tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.8'

    // # required, enough for most devices.
    api 'tv.danmaku.ijk.media:ijkplayer-java:0.8.8'
    api 'tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.8'

    implementation "androidx.core:core-ktx:1.2.0"
}
repositories {
    mavenCentral()
}
